#!/bin/sh

# Load configuration
if [ -f /etc/conf.d/fc-services ]; then
    source /etc/conf.d/fc-services
fi

# Set defaults
: ${RESTART_LOG:="/var/log/fc-services/restarts.log"}
: ${SERVICE_PATTERN:="^fc-"}
DRY_RUN="false"
SERVICE=""
FORCE="false"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "$message" | tee -a "$RESTART_LOG"
}

# Show usage information
show_help() {
    echo "Usage: $0 [options] <service_name>"
    echo "Options:"
    echo "  -d, --dry-run    Show what would be restarted without actually restarting"
    echo "  -f, --force      Force restart even if service is not running"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Dependency-aware service restarter for OpenRC"
}

# Parse command line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        -d|--dry-run)
            DRY_RUN="true"
            shift
            ;;
        -f|--force)
            FORCE="true"
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            if [ -z "$SERVICE" ]; then
                SERVICE="$1"
            else
                echo "Error: Too many arguments" >&2
                show_help
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate input
if [ -z "$SERVICE" ]; then
    echo "Error: Service name is required" >&2
    show_help
    exit 1
fi

if [ ! -e "/etc/init.d/$SERVICE" ]; then
    log "Error: Service $SERVICE does not exist"
    exit 1
fi

# Find dependent services
find_dependent_services() {
    local target="$1"
    find /etc/init.d/ -type f -name "${SERVICE_PATTERN}*" | while read -r service; do
        local name=$(basename "$service")
        [ "$name" = "$target" ] && continue
        if grep -q -E "^(need|use)[[:space:]]+$target\b" "$service"; then
            echo "$name"
        fi
    done
}

# Get running services
get_running_services() {
    rc-service --list | grep 'started' | awk '{print $1}'
}

# Main function
main() {
    log "Processing service: $SERVICE"
    
    # Find dependent services
    DEPENDENTS=$(find_dependent_services "$SERVICE")
    RUNNING_SERVICES=$(get_running_services)
    TO_RESTART=""
    RESTARTED=""

    # Check if main service is running or force restart
    if rc-service "$SERVICE" status >/dev/null 2>&1 || [ "$FORCE" = "true" ]; then
        TO_RESTART="$SERVICE"
        log "Main service $SERVICE will be restarted"
    else
        log "Main service $SERVICE is not running (use -f to force restart)"
    fi

    # Check dependent services
    for dep in $DEPENDENTS; do
        if rc-service "$dep" status >/dev/null 2>&1 || [ "$FORCE" = "true" ]; then
            TO_RESTART="$TO_RESTART $dep"
            log "Dependent service $dep will be restarted"
        else
            log "Dependent service $dep is not running"
        fi
    done

    # Process restart
    if [ -z "$TO_RESTART" ]; then
        log "No services to restart for $SERVICE"
        return
    fi

    if [ "$DRY_RUN" = "true" ]; then
        log "[DRY-RUN] Would restart: $TO_RESTART"
        return
    fi

    # Restart services
    for srv in $TO_RESTART; do
        log "Restarting $srv..."
        rc-service "$srv" restart
        exit_code=$?
        if [ $exit_code -eq 0 ]; then
            log "Successfully restarted $srv"
            RESTARTED="$RESTARTED $srv"
        else
            log "Error restarting $srv (exit code: $exit_code)"
        fi
    done

    if [ -n "$RESTARTED" ]; then
        log "Successfully restarted services:$RESTARTED"
    else
        log "No services were restarted"
    fi
}

# Execute main function
main